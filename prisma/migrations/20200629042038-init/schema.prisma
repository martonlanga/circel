generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = "***"
}

model User {
  id                     String     @id // twitterId
  createdAt              DateTime   @default(now())
  username               String     @unique // screenName
  token                  String
  tokenSecret            String
  profileImageUrl        String
  ethBounty              Float?
  endOfCampaign          DateTime?
  uploadedFollowersCount Int?
  followers              Follower[]
  messages               Message[]
  emails                 Email[]
  refs                   Ref[]
  dms                    Dm[]
}

// https://developer.twitter.com/en/docs/tweets/data-dictionary/overview/user-object
model Follower {
  id     Int    @default(autoincrement()) @id
  user   User   @relation(fields: [userId], references: [id])
  userId String
  dms    Dm[]

  twitterId           String
  name                String
  screenName          String
  location            String?
  description         String? // bio
  url                 String?
  protected           Boolean
  followersCount      Int
  friendsCount        Int // their followings
  listedCount         Int
  createdAt           DateTime
  favouritesCount     Int
  verified            Boolean
  statusesCount       Int
  lastStatusDate      DateTime?
  profileImageUrl     String // https
  profileBannerUrl    String?
  defaultProfile      Boolean
  defaultProfileImage Boolean
}

model Message {
  id        Int      @default(autoincrement()) @id
  createdAt DateTime @default(now())
  name      String
  message   String
  dms       Dm[]
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  filters   String?
  active    Boolean  @default(false)
}

model Dm {
  id         Int      @default(autoincrement()) @id
  createdAt  DateTime @default(now())
  follower   Follower @relation(fields: [followerId], references: [id])
  followerId Int
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  message    Message  @relation(fields: [messageId], references: [id])
  messageId  Int
}

model Email {
  id                Int      @default(autoincrement()) @id
  createdAt         DateTime @default(now())
  email             String
  verified          Boolean  @default(false)
  verificationToken String
  user              User     @relation(fields: [userId], references: [id])
  userId            String
  ref               Ref?     @relation(fields: [refId], references: [id])
  refId             String?
}

// every email is also a referrer? -> problem: can't sign up to diff incluencers using diff emails
model Ref {
  // will be created when first person using referrer's link signs up
  id         String   @id // twitter screen name
  createdAt  DateTime @default(now())
  ethAddress String?
  users      User[]
  referrals  Email[]
}
